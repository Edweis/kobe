<!DOCTYPE html>
<html lang="en">

{{#> head}}
  <script>
    function getPath(){
      const hash = window.location.hash.replace('#', '')
      return hash.split('/').filter(Boolean)
    }
    function searchStr(value, search){
      return value.toLowerCase().includes(search.toLowerCase())
    }

    function randKey(prefix, length = 8) {
      const keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
      let res = '';
      for (let i = 0; i < length; i++) {
        const index = Math.floor(Math.random() * keys.length);
        res += keys.charAt(index);
      }
      return prefix + res;
    }

    function computeBalance(expenses) {
      let highest = { amount: -Infinity }
      let lowest = { amount: Infinity }
      expenses.forEach((amount, name) => {
        if (amount == 0) return
        if (highest.amount < amount) highest = { name, amount }
        if (amount < lowest.amount) lowest = { name, amount }
      })
      if (highest.name === lowest.name) return []

      expenses.delete(lowest.name);
      expenses.set(highest.name, highest.amount + lowest.amount)
      const tx = { from: lowest.name, to: highest.name, amount: -lowest.amount }
      return [tx, ...computeBalance(expenses)]
    }

    function computeExpenses(lines){
      const expenses = new Map()
      lines
        .flatMap(l => l.split.map(ll => ({ ...ll, paid: l.paid })))
        .forEach(({ participant, amount, paid }) => {
          expenses.set(paid, (expenses.get(paid) || 0) + Number(amount))
          expenses.set(participant, (expenses.get(participant) || 0) - Number(amount))
        });
      return expenses
    }

    const CURR_MAX_DEC = {"IDR":0,"BIF":0,"CLP":0,"DJF":0,"GNF":0,"ISK":0,"JPY":0,"KMF":0,"KRW":0,"PYG":0,"RWF":0,"UGX":0,"UYI":0,"VND":0,"VUV":0,"XAF":0,"XOF":0,"XPF":0,"BHD":3,"IQD":3,"JOD":3,"KWD":3,"LYD":3,"OMR":3,"TND":3,"CLF":4,"UYW":4}
    function toCurrency(curr, amount){
      const digits = CURR_MAX_DEC[curr]??2
      return Intl
        .NumberFormat(undefined, { style: 'currency', currency: curr, minimumFractionDigits:digits, maximumFractionDigits:digits})
        .format(amount)
    }
    function shortDate(dateString) {
      const months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];
      const date = new Date(dateString);
      const day = date.getDate();
      const month = months[date.getMonth()];
      return `${day} ${month}`;
    }
  </script>
{{/head}}

<body 
  class="flex flex-col gap-4 pt-4 h-screen" 
  x-cloak="" 
  x-data="{ 
    path: getPath(), search: undefined,
    projects:[], allLines:[],  
    projectId: undefined, lineId: undefined,
    project: {participants:[]}, lines: [], line: {split:[]},
    currencies: ['EUR', 'IDR', 'SGD', 'USD'],

    sync(projects=[], lines=[]){
      return fetch('/data.json', { 
        method: 'POST', 
        body: JSON.stringify({ projects, lines }),
        headers: { 'Content-Type': 'application/json' }
      }).then(r => r.json())
    }
  }"
  x-init="
    console.log($data, sync)
    sync([], []).then(res => {
      projects = res.projects; allLines = res.lines
    })
    addEventListener('hashchange', () => { path = getPath() });
  ";
  x-effect="
    project = projects.find(p => p.id === projectId) ||{ participants:[]}
    lines = allLines.filter(l => l.project_id === projectId).filter(l => search==null || searchStr(l.name, search))
    line  =   allLines.find(l => l.project_id === projectId && l.id === lineId) || {split:[]}
    
    pendingProjects = projects.filter(p=>p.pending)
    pendingLines = allLines.filter(p=>p.pending);
    if(pendingProjects.length || pendingLines.length) 
      sync(pendingProjects,pendingLines).then(res => {
        projects = res.projects; allLines = res.lines
      })
  "

>

{{!-- / --}}
<section x-show="path.length === 0"> 
  {{> index}}
</section>

{{!-- /projects/:projectId --}}
<section 
  x-show="path[0] === 'projects' && path.length === 2" 
  x-effect="projectId = path[1]"
>
  {{> projects}}
</section>

{{!-- /projects/:projectId/balance --}}
<section 
  x-show="path[0] === 'projects' && path[2] === 'balance' && path.length === 3" 
  x-effect="projectId = path[1]"
>
  {{> project-balance}}
</section>

{{!-- /projects/:projectId/settings --}}
<section 
  x-show="path[0] === 'projects' && path[2] === 'settings' && path.length === 3" 
  x-effect="projectId = path[1]"
  >
  {{> project-settings}}
</section>

{{!-- /projects/:projectId/reim --}}
<section 
  x-show="path[0] === 'projects' && path[2] === 'reim' && path.length === 3" 
  x-effect="projectId = path[1]"
>
  {{> project-reim}}
</section>

{{!-- /projects/:projectId/lines/:lineId --}}
<section 
  x-show="path[0] === 'projects' && path[2] === 'lines' && path.length === 4" 
  x-effect="projectId = path[1]; lineId = path[3]; console.log({lineId})"
>
  {{> project-line}}
</section>

</body>