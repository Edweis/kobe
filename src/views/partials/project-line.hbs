<script>
  const round = (value, digits) =>Number(value.toFixed(digits))
  function computeSplit(){
   const DECIMALS = 2
   const checked = document.querySelectorAll('input[data-included]:checked')
   const total = Number(document.querySelector('input[name=amount]').value) ?? 0 
   const amount = checked.length === 0 ? 0 : round(total / checked.length, DECIMALS)
   let remaining = round(total - amount * checked.length, DECIMALS) // remaining cents lots in rounding
   
   document.querySelectorAll('input[data-included]').forEach(el => {
    const participant = el.attributes['data-included'].value
    const ouput = el.nextElementSibling.nextElementSibling.nextElementSibling
    if(el.checked){
      if(remaining) {
        ouput.value = round(amount+ remaining, DECIMALS)
        remaining = 0
      } else ouput.value = amount
    } else ouput.value = 0 
   })
  }
  function deleteLine(){
    const willDelete = confirm('Are you sure you want to delete?') 
    if(willDelete) {
       const form = event.target.closest('form')
       form.action = form.action +'/delete'
    }
    else event.preventDefault()
  }
  function nowForInput(){
    const now = new Date();
    now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
    now.setSeconds(0)
    return now.toISOString().split('.')[0]
  }
  function getFormData(formEl){
    const data = {}
    new FormData(formEl).forEach((value, key)=>{
      if(key.startsWith('split')) {
        const [,index, subKey] = /split\[(\d)\]\[(\w+)\]/.exec(key)
        if(data.split==null) data.split = []
        if(data.split[index]==null) data.split[index] = {}
        data.split[index][subKey] = value
      }
      else data[key] = value
    })
    return data
  }
</script>

<header>
  <h1 x-text="line.name || 'New'"></h1>
  <span x-text="project.name"></span>
</header>
<nav>
  <a :href="'#projects/'+projectId" id="back-project">Back</a>
</nav>
<form class="grid" @submit.prevent="allLines.push(getFormData(event.target)); history.back()">
  <input type="hidden" name="project_id" x-model="projectId" />
  <input type="hidden" name="pending" :value="new Date().toISOString()" />
  <input type="hidden" name="id" x-model="lineId" />
  <label class="form-control">
    <span class="label label-text">Title</span>
    <input name="name" class="input input-bordered" :value="line.name" autofocus="" required="" />
  </label>
  <label class="form-control">
    <span class="label label-text">Amount</span>
    <div class="flex gap-2">
      <input name="amount" :value="line.amount"  class="input input-bordered grow" inputmode="decimal" pattern="[0-9.\-]*" type="text" oninput="computeSplit()" required=""  />
      <select name="currency" class="select select-bordered" x-model="line.currency">
        <template x-for="currency in currencies">
        <option :value="currency" x-text="currency"></option>
        </template>
      </select>
    </div>
  </label>
  <label class="form-control">
    <span class="label label-text">Date</span>
    <input type="datetime-local" name="created_at" :value="line.created_at || nowForInput()" @change="line.created_at = event.target.value" class="input input-bordered" />
  </label>
  <label class="form-control">
    <span class="label label-text">Paid by</span>
    <select name="paid" x-model="line.paid" class="select select-bordered">
      <template x-for="part in project.participants">
      <option :value="part" x-text="part"></option>
      </template>
    </select>
  </label>
  <ul class="grid gap-4 mt-4">
    <template x-for="(part, index) in project.participants">
    <li class="flex items-center gap-4" x-data="{ splitLine: line.split.find(s => s.participant === part) }" >
      <input :id="'part'+ index" :data-included="part" :checked="splitLine ==null || splitLine.amount > 0" type="checkbox" onclick="computeSplit()" class="checkbox"/>
      <label :for="'part'+ index" class="flex items-center gap-4" x-text="part"></label>
      <input :name="'split['+index+'][participant]'" :value="part" type="hidden"/>
      <input :name="'split['+index+'][amount]'" :value="splitLine?.amount || 0" class="input input-bordered w-full" inputmode="numeric" pattern="[0-9.\-]*" type="text"/>
      <span x-text="line.currency"></span>
    </li>
    </template>
  </ul>
  <div class="my-8 flex justify-start gap-8 flex-row-reverse">
    <button class="btn btn-primary">Save</button>
    <button class="btn btn-warning" onclick="deleteLine(event)">Delete</button>
  </div>
</form>